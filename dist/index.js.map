{
  "version": 3,
  "sources": ["../lib/nanmeanpn.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmeanpn( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction nanmeanpn( N, x, stride ) {\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar t;\n\tvar n;\n\tvar i;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\to = ix;\n\n\t// Compute an estimate for the mean...\n\ts = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\ts += v;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\ts /= n;\n\n\t// Compute an error term...\n\tt = 0.0;\n\tix = o;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tt += v - s;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s + (t/n);\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmeanpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmeanpn( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction nanmeanpn( N, x, stride, offset ) {\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar t;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// Compute an estimate for the mean...\n\ts = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\ts += v;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\ts /= n;\n\n\t// Compute an error term...\n\tix = offset;\n\tt = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tt += v - s;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s + (t/n);\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmeanpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nanmeanpn = require( './nanmeanpn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nanmeanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nanmeanpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* @module @stdlib/stats-base-nanmeanpn\n*\n* @example\n* var nanmeanpn = require( '@stdlib/stats-base-nanmeanpn' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmeanpn( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var nanmeanpn = require( '@stdlib/stats-base-nanmeanpn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmeanpn.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA8CA,SAASC,EAAWC,EAAGC,EAAGC,EAAS,CAClC,IAAIC,EACAC,EACAC,EACA,EACAC,EACAC,EACA,EAEJ,GAAKP,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKE,IAAW,EAC1B,OAAOD,EAAG,CAAE,EAYb,IAVKC,EAAS,EACbC,GAAM,EAAEH,GAAKE,EAEbC,EAAK,EAEN,EAAIA,EAGJE,EAAI,EACJC,EAAI,EACEC,EAAI,EAAGA,EAAIP,EAAGO,IACnBH,EAAIH,EAAGE,CAAG,EACLC,IAAMA,IACVE,GAAK,EACLD,GAAKD,GAEND,GAAMD,EAEP,GAAKI,IAAM,EACV,MAAO,KAOR,IALAD,GAAKC,EAGL,EAAI,EACJH,EAAK,EACCI,EAAI,EAAGA,EAAIP,EAAGO,IACnBH,EAAIH,EAAGE,CAAG,EACLC,IAAMA,IACV,GAAKA,EAAIC,GAEVF,GAAMD,EAEP,OAAOG,EAAK,EAAEC,CACf,CAKAR,EAAO,QAAUC,ICpGjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAiDA,SAASC,EAAWC,EAAGC,EAAGC,EAAQC,EAAS,CAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKE,IAAW,EAC1B,OAAOD,EAAGE,CAAO,EAOlB,IALAC,EAAKD,EAGLG,EAAI,EACJE,EAAI,EACEC,EAAI,EAAGA,EAAIT,EAAGS,IACnBJ,EAAIJ,EAAGG,CAAG,EACLC,IAAMA,IACVG,GAAK,EACLF,GAAKD,GAEND,GAAMF,EAEP,GAAKM,IAAM,EACV,MAAO,KAOR,IALAF,GAAKE,EAGLJ,EAAKD,EACLI,EAAI,EACEE,EAAI,EAAGA,EAAIT,EAAGS,IACnBJ,EAAIJ,EAAGG,CAAG,EACLC,IAAMA,IACVE,GAAKF,EAAIC,GAEVF,GAAMF,EAEP,OAAOI,EAAKC,EAAEC,CACf,CAKAV,EAAO,QAAUC,ICjGjB,IAAAW,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAY,IACZC,EAAU,IAKdF,EAAaC,EAAW,UAAWC,CAAQ,EAK3CH,EAAO,QAAUE,ICajB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_nanmeanpn", "__commonJSMin", "exports", "module", "nanmeanpn", "N", "x", "stride", "ix", "v", "s", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "nanmeanpn", "N", "x", "stride", "offset", "ix", "v", "s", "t", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "nanmeanpn", "ndarray", "main"]
}
