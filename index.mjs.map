{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanmeanpn( 5, x, 2, 1 );\n* // returns 1.25\n*/\nfunction nanmeanpn( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar s;\n\tvar t;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\n\t// Compute an estimate for the mean...\n\ts = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\ts += v;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\ts /= n;\n\n\t// Compute an error term...\n\tix = offsetX;\n\tt = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tt += v - s;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn s + (t/n);\n}\n\n\n// EXPORTS //\n\nexport default nanmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = nanmeanpn( 5, arraylike2object( x ), 2, 1 );\n* // returns 1.25\n*/\nfunction nanmeanpn( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar t;\n\tvar n;\n\tvar i;\n\tvar o;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn get( xbuf, offsetX );\n\t}\n\tix = offsetX;\n\to = ix;\n\n\t// Compute an estimate for the mean...\n\ts = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\ts += v;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\ts /= n;\n\n\t// Compute an error term...\n\tt = 0.0;\n\tix = o;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tt += v - s;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn s + (t/n);\n}\n\n\n// EXPORTS //\n\nexport default nanmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanmeanpn( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction nanmeanpn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default nanmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a strided array, ignoring `NaN` values and using a two-pass error correction algorithm.\n*\n* @module @stdlib/stats-base-nanmeanpn\n*\n* @example\n* import nanmeanpn from '@stdlib/stats-base-nanmeanpn';\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanmeanpn( x.length, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* import nanmeanpn from '@stdlib/stats-base-nanmeanpn';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanmeanpn.ndarray( 5, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["nanmeanpn","N","x","strideX","offsetX","ix","o","v","s","t","n","i","NaN","arraylike2object","accessorProtocol","xbuf","get","data","accessors","ndarray","stride2offset","setReadOnly","main"],"mappings":";;mUAoDA,SAASA,EAAWC,EAAGC,EAAGC,EAASC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOW,IAGR,IADAN,EAAIO,EAAkBX,IACfY,iBACN,OCdF,SAAoBb,EAAGC,EAAGC,EAASC,GAClC,IAAIW,EACAC,EACAX,EACAE,EACAC,EACAC,EACAC,EACAC,EACAL,EAQJ,GALAS,EAAOb,EAAEe,KAGTD,EAAMd,EAAEgB,UAAW,GAER,IAANjB,GAAuB,IAAZE,EACf,OAAOa,EAAKD,EAAMX,GAQnB,IALAE,EADAD,EAAKD,EAILI,EAAI,EACJE,EAAI,EACEC,EAAI,EAAGA,EAAIV,EAAGU,KACnBJ,EAAIS,EAAKD,EAAMV,KACJE,IACVG,GAAK,EACLF,GAAKD,GAENF,GAAMF,EAEP,GAAW,IAANO,EACJ,OAAOE,IAOR,IALAJ,GAAKE,EAGLD,EAAI,EACJJ,EAAKC,EACCK,EAAI,EAAGA,EAAIV,EAAGU,KACnBJ,EAAIS,EAAKD,EAAMV,KACJE,IACVE,GAAKF,EAAIC,GAEVH,GAAMF,EAEP,OAAOK,EAAKC,EAAEC,CACf,CDpCSQ,CAAWjB,EAAGK,EAAGH,EAASC,GAElC,GAAW,IAANH,GAAuB,IAAZE,EACf,OAAOD,EAAGE,GAOX,IALAC,EAAKD,EAGLI,EAAI,EACJE,EAAI,EACEC,EAAI,EAAGA,EAAIV,EAAGU,KACnBJ,EAAIL,EAAGG,KACIE,IACVG,GAAK,EACLF,GAAKD,GAENF,GAAMF,EAEP,GAAW,IAANO,EACJ,OAAOE,IAOR,IALAJ,GAAKE,EAGLL,EAAKD,EACLK,EAAI,EACEE,EAAI,EAAGA,EAAIV,EAAGU,KACnBJ,EAAIL,EAAGG,KACIE,IACVE,GAAKF,EAAIC,GAEVH,GAAMF,EAEP,OAAOK,EAAKC,EAAEC,CACf,CE1DA,SAASV,EAAWC,EAAGC,EAAGC,GACzB,OAAOgB,EAASlB,EAAGC,EAAGC,EAASiB,EAAenB,EAAGE,GAClD,CCOAkB,EAAAC,EAAA,UAAAH"}